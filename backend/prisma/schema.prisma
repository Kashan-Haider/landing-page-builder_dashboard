generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model LandingPage {
  id                         String                      @id @default(uuid())
  templateId                 String                     
  businessName               String
  githubUrl                  String?
  serviceAreas               ServiceArea[]
  socialLinks                SocialLink[]
  images                     Images[]
  heroSections               HeroSection[]
  aboutSections              AboutSection[]
  servicesSections           ServicesSection[]
  gallerySections            GallerySection[]
  testimonialsSections       TestimonialsSection[]
  faqSections                FAQSection[]
  serviceAreaSections        ServiceAreaSection[]
  businessDetailsSections    BusinessDetailsSection[]
  companyOverviewSections    CompanyOverviewSection[]
  serviceHighlightsSections  ServiceHighlightsSection[]
  preFooterSections          PreFooterSection[]
  footerSections             FooterSection[]
  theme                      Theme?
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt
  seoSettingsId              String?
  businessContactId          String?
  businessContact            BusinessContact?            @relation(fields: [businessContactId], references: [id])
  seoSettings                SEOSettings?                @relation(fields: [seoSettingsId], references: [id])
}

model SEOSettings {
  id            String        @id @default(uuid())
  title         String        @unique
  description   String
  keywords      String[]
  favicon       String?       // image slot "favicon-01"
  templates     LandingPage[]
}

model Images {
  id         String      @id @default(uuid())
  templateId String
  imageId    String      @unique
  title      String?
  altText    String
  image      String      // Assuming string URL/image reference
  template   LandingPage @relation(fields: [templateId], references: [id])
}

model BusinessContact {
  id               String            @id @default(uuid())
  businessName     String
  phone            String
  emergencyPhone   String?
  email            String
  emergencyEmail   String?
  street           String?
  city             String?
  state            String?
  zipCode          String?
  latitude         Float?
  longitude        Float?
  businessHours    BusinessHour[]
  templates        LandingPage[]
}

model BusinessHour {
  id                String          @id @default(uuid())
  day               String
  hours             String?
  isClosed          Boolean
  businessContactId String
  businessContact   BusinessContact @relation(fields: [businessContactId], references: [id])
}

model SocialLink {
  id                String              @id @default(uuid())
  platform          String
  url               String
  templates         LandingPage[]
  preFooterSections PreFooterSection[]
}

model CtaButton {
  id                        String                     @id @default(uuid())
  label                     String
  href                      String
  services                  Service[]
  galleryItems              GalleryItem[]
  serviceAreas              ServiceArea[]
  heroSections              HeroSection[]
  aboutSections             AboutSection[]
  servicesSections          ServicesSection[]
  serviceAreaSections       ServiceAreaSection[]
  companyOverviewSections   CompanyOverviewSection[]
}

model Service {
  id              String           @id @default(uuid())
  title           String
  description     String?
  features        String[]
  ctaButtonId     String?
  ctaButton       CtaButton?       @relation(fields: [ctaButtonId], references: [id])
  servicesSections ServicesSection[] @relation("ServicesSectionServices")
}

model GalleryItem {
  id                  String                @id @default(uuid())
  title               String
  description         String?
  image               String?               // Uses image slots "gallery-image-01" through "gallery-image-06"
  ctaButtonId         String?
  ctaButton           CtaButton?            @relation(fields: [ctaButtonId], references: [id])
  category            String?
  testimonialsSections TestimonialsSection[] @relation("TestimonialsSectionGalleryItems")
}

model Testimonial {
  id                  String                @id @default(uuid())
  name                String
  role                String?
  company             String?
  industry            String?
  text                String
  image               String?               // Uses image slots "testimonial-avatar-01" through "testimonial-avatar-06"
  testimonialsSections TestimonialsSection[] @relation("TestimonialsSectionTestimonials")
}

model FAQItem {
  id          String       @id @default(uuid())
  question    String
  answer      String
  category    String?
  faqSections FAQSection[] @relation("FAQSectionFAQItems")
}

model ServiceArea {
  id                  String                @id @default(uuid())
  city                String
  region              String?
  description         String?
  ctaButtonId         String?
  ctaButton           CtaButton?            @relation(fields: [ctaButtonId], references: [id])
  serviceAreaSections ServiceAreaSection[]  @relation("ServiceAreaSectionServiceAreas")
  footerServiceAreas  FooterServiceArea[]   @relation("FooterServiceAreaServiceAreas")
  landingPages        LandingPage[]
}

model Statistic {
  id                        String                     @id @default(uuid())
  value                     String
  label                     String
  serviceHighlightsSections ServiceHighlightsSection[] @relation("ServiceHighlightsSectionStatistics")
}

model FooterServiceArea {
  id            String          @id @default(uuid())
  region        String
  services      String[]
  footerSections FooterSection[] @relation("FooterSectionServiceAreas")
  serviceAreas  ServiceArea[]   @relation("FooterServiceAreaServiceAreas")
}

// Section Models
model HeroSection {
  id         String      @id @default(uuid())
  title      String
  subtitle   String?
  description String?
  ctaButtons CtaButton[]
  templateId String
  template   LandingPage @relation(fields: [templateId], references: [id])
}

model AboutSection {
  id          String      @id @default(uuid())
  title       String
  description String
  features    String[]
  ctaButtonId String?
  ctaButton   CtaButton?  @relation(fields: [ctaButtonId], references: [id])
  templateId  String
  template    LandingPage @relation(fields: [templateId], references: [id])
}

model ServicesSection {
  id          String      @id @default(uuid())
  title       String
  description String?
  services    Service[]   @relation("ServicesSectionServices")
  ctaButtonId String?
  ctaButton   CtaButton?  @relation(fields: [ctaButtonId], references: [id])
  templateId  String
  template    LandingPage @relation(fields: [templateId], references: [id])
}

model GallerySection {
  id          String      @id @default(uuid())
  title       String
  description String?
  templateId  String
  template    LandingPage @relation(fields: [templateId], references: [id])
}

model TestimonialsSection {
  id           String        @id @default(uuid())
  title        String
  description  String?
  testimonials Testimonial[] @relation("TestimonialsSectionTestimonials")
  galleryItems GalleryItem[] @relation("TestimonialsSectionGalleryItems")
  templateId   String
  template     LandingPage   @relation(fields: [templateId], references: [id])
}

model FAQSection {
  id          String      @id @default(uuid())
  title       String
  description String?
  faqs        FAQItem[]   @relation("FAQSectionFAQItems")
  templateId  String
  template    LandingPage @relation(fields: [templateId], references: [id])
}

model ServiceAreaSection {
  id           String        @id @default(uuid())
  title        String
  description  String?
  serviceAreas ServiceArea[] @relation("ServiceAreaSectionServiceAreas")
  ctaButtonId  String?
  ctaButton    CtaButton?    @relation(fields: [ctaButtonId], references: [id])
  templateId   String
  template     LandingPage   @relation(fields: [templateId], references: [id])
}

model BusinessDetailsSection {
  id          String                        @id @default(uuid())
  title       String?
  sections    BusinessDetailSubSection[]
  contactForm BusinessContactForm?
  map         MapSettings?
  templateId  String
  template    LandingPage                   @relation(fields: [templateId], references: [id])
}

model BusinessDetailSubSection {
  id                       String                  @id @default(uuid())
  title                    String?
  description              String?
  ctaTitle                 String
  businessDetailsSectionId String
  businessDetailsSection   BusinessDetailsSection @relation(fields: [businessDetailsSectionId], references: [id])
}

model BusinessContactForm {
  id                       String                  @id @default(uuid())
  title                    String?
  businessDetailsSectionId String                  @unique
  businessDetailsSection   BusinessDetailsSection @relation(fields: [businessDetailsSectionId], references: [id])
}

model MapSettings {
  id                       String                  @id @default(uuid())
  latitude                 Float?
  longitude                Float?
  locationName             String?
  businessDetailsSectionId String                  @unique
  businessDetailsSection   BusinessDetailsSection @relation(fields: [businessDetailsSectionId], references: [id])
}

model CompanyOverviewSection {
  id          String                        @id @default(uuid())
  title       String?
  sections    CompanyOverviewSubSection[]
  ctaButtonId String?
  ctaButton   CtaButton?                    @relation(fields: [ctaButtonId], references: [id])
  templateId  String
  template    LandingPage                   @relation(fields: [templateId], references: [id])
}

model CompanyOverviewSubSection {
  id                       String                  @id @default(uuid())
  title                    String?
  description              String?
  companyOverviewSectionId String
  companyOverviewSection   CompanyOverviewSection @relation(fields: [companyOverviewSectionId], references: [id])
}

model ServiceHighlightsSection {
  id         String      @id @default(uuid())
  title      String
  statistics Statistic[] @relation("ServiceHighlightsSectionStatistics")
  templateId String
  template   LandingPage @relation(fields: [templateId], references: [id])
}

model PreFooterSection {
  id          String        @id @default(uuid())
  description String?
  socialLinks SocialLink[]
  templateId  String
  template    LandingPage   @relation(fields: [templateId], references: [id])
}

model FooterSection {
  id           String              @id @default(uuid())
  serviceAreas FooterServiceArea[] @relation("FooterSectionServiceAreas")
  copyright    String?
  templateId   String
  template     LandingPage         @relation(fields: [templateId], references: [id])
}

// Webhook Models
model WebhookConfig {
  id        String   @id @default(uuid())
  name      String
  url       String
  events    String[] // ["created", "updated"]
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WebhookLog {
  id           String   @id @default(uuid())
  webhookId    String
  event        String   // "created" or "updated"
  templateId   String
  githubUrl    String?
  payload      Json
  status       String   // "success", "failed", "pending"
  statusCode   Int?
  errorMessage String?
  sentAt       DateTime @default(now())
  retryCount   Int      @default(0)
}

// Embedded Object Types converted to separate models
model Theme {
  id             String       @id @default(uuid())
  primaryColor   String?
  secondaryColor String?
  landingPageId  String       @unique
  landingPage    LandingPage  @relation(fields: [landingPageId], references: [id])
}